// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeCreateOrgActor struct {
	CreateOrganizationStub        func(orgName string, quotaName string) (v2action.Organization, v2action.Warnings, error)
	createOrganizationMutex       sync.RWMutex
	createOrganizationArgsForCall []struct {
		orgName   string
		quotaName string
	}
	createOrganizationReturns struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}
	createOrganizationReturnsOnCall map[int]struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}
	GrantOrgManagerByUsernameStub        func(guid string, username string) (v2action.Warnings, error)
	grantOrgManagerByUsernameMutex       sync.RWMutex
	grantOrgManagerByUsernameArgsForCall []struct {
		guid     string
		username string
	}
	grantOrgManagerByUsernameReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	grantOrgManagerByUsernameReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateOrgActor) CreateOrganization(orgName string, quotaName string) (v2action.Organization, v2action.Warnings, error) {
	fake.createOrganizationMutex.Lock()
	ret, specificReturn := fake.createOrganizationReturnsOnCall[len(fake.createOrganizationArgsForCall)]
	fake.createOrganizationArgsForCall = append(fake.createOrganizationArgsForCall, struct {
		orgName   string
		quotaName string
	}{orgName, quotaName})
	fake.recordInvocation("CreateOrganization", []interface{}{orgName, quotaName})
	fake.createOrganizationMutex.Unlock()
	if fake.CreateOrganizationStub != nil {
		return fake.CreateOrganizationStub(orgName, quotaName)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createOrganizationReturns.result1, fake.createOrganizationReturns.result2, fake.createOrganizationReturns.result3
}

func (fake *FakeCreateOrgActor) CreateOrganizationCallCount() int {
	fake.createOrganizationMutex.RLock()
	defer fake.createOrganizationMutex.RUnlock()
	return len(fake.createOrganizationArgsForCall)
}

func (fake *FakeCreateOrgActor) CreateOrganizationArgsForCall(i int) (string, string) {
	fake.createOrganizationMutex.RLock()
	defer fake.createOrganizationMutex.RUnlock()
	return fake.createOrganizationArgsForCall[i].orgName, fake.createOrganizationArgsForCall[i].quotaName
}

func (fake *FakeCreateOrgActor) CreateOrganizationReturns(result1 v2action.Organization, result2 v2action.Warnings, result3 error) {
	fake.CreateOrganizationStub = nil
	fake.createOrganizationReturns = struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateOrgActor) CreateOrganizationReturnsOnCall(i int, result1 v2action.Organization, result2 v2action.Warnings, result3 error) {
	fake.CreateOrganizationStub = nil
	if fake.createOrganizationReturnsOnCall == nil {
		fake.createOrganizationReturnsOnCall = make(map[int]struct {
			result1 v2action.Organization
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.createOrganizationReturnsOnCall[i] = struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateOrgActor) GrantOrgManagerByUsername(guid string, username string) (v2action.Warnings, error) {
	fake.grantOrgManagerByUsernameMutex.Lock()
	ret, specificReturn := fake.grantOrgManagerByUsernameReturnsOnCall[len(fake.grantOrgManagerByUsernameArgsForCall)]
	fake.grantOrgManagerByUsernameArgsForCall = append(fake.grantOrgManagerByUsernameArgsForCall, struct {
		guid     string
		username string
	}{guid, username})
	fake.recordInvocation("GrantOrgManagerByUsername", []interface{}{guid, username})
	fake.grantOrgManagerByUsernameMutex.Unlock()
	if fake.GrantOrgManagerByUsernameStub != nil {
		return fake.GrantOrgManagerByUsernameStub(guid, username)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.grantOrgManagerByUsernameReturns.result1, fake.grantOrgManagerByUsernameReturns.result2
}

func (fake *FakeCreateOrgActor) GrantOrgManagerByUsernameCallCount() int {
	fake.grantOrgManagerByUsernameMutex.RLock()
	defer fake.grantOrgManagerByUsernameMutex.RUnlock()
	return len(fake.grantOrgManagerByUsernameArgsForCall)
}

func (fake *FakeCreateOrgActor) GrantOrgManagerByUsernameArgsForCall(i int) (string, string) {
	fake.grantOrgManagerByUsernameMutex.RLock()
	defer fake.grantOrgManagerByUsernameMutex.RUnlock()
	return fake.grantOrgManagerByUsernameArgsForCall[i].guid, fake.grantOrgManagerByUsernameArgsForCall[i].username
}

func (fake *FakeCreateOrgActor) GrantOrgManagerByUsernameReturns(result1 v2action.Warnings, result2 error) {
	fake.GrantOrgManagerByUsernameStub = nil
	fake.grantOrgManagerByUsernameReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeCreateOrgActor) GrantOrgManagerByUsernameReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.GrantOrgManagerByUsernameStub = nil
	if fake.grantOrgManagerByUsernameReturnsOnCall == nil {
		fake.grantOrgManagerByUsernameReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.grantOrgManagerByUsernameReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeCreateOrgActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOrganizationMutex.RLock()
	defer fake.createOrganizationMutex.RUnlock()
	fake.grantOrgManagerByUsernameMutex.RLock()
	defer fake.grantOrgManagerByUsernameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreateOrgActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.CreateOrgActor = new(FakeCreateOrgActor)
